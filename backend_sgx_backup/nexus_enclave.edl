enclave {

    include "nexus_types.h"
    include "nexus_uuid.h"
    include "nexus_key.h"

    trusted {

        public int ecall_init_enclave();

        public int ecall_create_volume(
            [user_check] struct nexus_uuid * supernode_uuid_in,
            [user_check] struct nexus_uuid * root_uuid_in,
            [user_check] struct nexus_key  * user_pubkey_in,
            [user_check] struct supernode  * sealed_supernode_out,
            [user_check] struct dirnode    * sealed_dirnode_out,
            [user_check] struct volumekey  * sealed_volumekey_out
        );

        public int ecall_authentication_request(
            [user_check] struct nexus_key   * owner_pubkey_in,
            [user_check] struct nexus_nonce * nonce_out
        );

        public int ecall_authentication_response(
            [user_check] struct volumekey * volumekey_in,
            [user_check] struct supernode * supernode_in,
            [user_check] uint8_t          * response_signature_in,
                         size_t             signature_len
        );














        // dirnode stuff

        /**
         * Creates a new dirnode 
         * @param uuid_ext the dirnode's uuid
         * @param root_uuid_ext the dirnode of the parent directory
         * @param dirnode_out_ext destination pointer for the new dirnode.
         * @return 0 on success
         */
        public int ecall_dirnode_new(
            [user_check] struct nexus_uuid * uuid_ext,
            [user_check] struct nexus_uuid * root_uuid_ext,
            [user_check] struct dirnode * dirnode_out_ext
        );

        /**
         * Add a new file/dir into the dirnode
         * @param dirnode_ext
         * @param 
         * @param dirnode_out_ext destination pointer for the new dirnode.
         * @return 0 on success
         */
        public int ecall_dirnode_add(
            [user_check] struct dirnode * dirnode_ext,
            [user_check] struct nexus_uuid * uuid,
            [in, string] const char * fname_str_in,
            nexus_fs_obj_type_t type
        );

        public int ecall_dirnode_find_by_uuid(
            [user_check] struct dirnode *      sealed_dirnode_ext,
            [user_check] struct nexus_uuid *   uuid_ext,
            [user_check] char **               fname_str_out_ext,
            [user_check] nexus_fs_obj_type_t * type_out_ext
        );

        public int ecall_dirnode_find_by_name(
            [user_check] struct dirnode *      sealed_dirnode_ext,
            [user_check] char *                fname_str_ext,
            [user_check] struct nexus_uuid *         uuid_out_ext,
            [user_check] nexus_fs_obj_type_t * type_out_ext
        );

        public int ecall_dirnode_remove(
            [user_check] struct dirnode *      sealed_dirnode_ext,
            [user_check] char *                fname_str_ext,
            [user_check] struct nexus_uuid *         uuid_out_ext,
            [user_check] nexus_fs_obj_type_t * type_out_ext
        );

        public int ecall_dirnode_serialize(
            [user_check] struct dirnode * dirnode,
            [user_check] struct dirnode ** p_sealed_dirnode_out_ext
        );
    };

    untrusted {
        void ocall_print([in, string] const char * str);

        // performs an allocation in untrusted space
        void * ocall_calloc(size_t size);
    };

};
