diff --git a/src/afs/LINUX/osi_module.c b/src/afs/LINUX/osi_module.c
index 0b34f1a..fa77630 100644
--- a/src/afs/LINUX/osi_module.c
+++ b/src/afs/LINUX/osi_module.c
@@ -90,6 +90,8 @@ afs_init(void)
     osi_ioctl_init();
     afs_init_pagecopy();
 
+    ucafs_mod_init();
+
     return 0;
 }
 
diff --git a/src/afs/VNOPS/afs_vnop_create.c b/src/afs/VNOPS/afs_vnop_create.c
index f33da96..c437cde 100644
--- a/src/afs/VNOPS/afs_vnop_create.c
+++ b/src/afs/VNOPS/afs_vnop_create.c
@@ -58,6 +58,9 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     struct afs_fakestat_state fakestate;
     struct rx_connection *rxconn;
     XSTATS_DECLS;
+    /* ucafs code */
+    char * shadow_name = NULL;
+    int is_ucafs_file = 0;
     OSI_VC_CONVERT(adp);
 
     AFS_STATCNT(afs_create);
@@ -299,6 +302,14 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
 
     if (!AFS_IS_DISCONNECTED) {
 	/* If not disconnected, connect to the server.*/
+	
+	/* ucafs code */
+	if (ucafs_kern_create(adp, aname, UC_FILE, &shadow_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    is_ucafs_file = 0;
+	    shadow_name = aname;
+	}
 
     	InStatus.UnixModeBits = attrs->va_mode & 0xffff;	/* only care about protection bits */
     	do {
@@ -310,7 +321,7 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
 	    	RX_AFS_GUNLOCK();
 	    	code =
 		    RXAFS_CreateFile(rxconn, (struct AFSFid *)&adp->f.fid.Fid,
-				 aname, &InStatus, (struct AFSFid *)
+				 shadow_name, &InStatus, (struct AFSFid *)
 				 &newFid.Fid, OutFidStatus, OutDirStatus,
 				 &CallBack, &tsync);
 	    	RX_AFS_GLOCK();
@@ -503,6 +514,10 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     afs_DestroyReq(treq);
 
   done2:
+    /* ucafs code */
+    if (is_ucafs_file) {
+	kfree(shadow_name);
+    }
     osi_FreeSmallSpace(OutFidStatus);
     osi_FreeSmallSpace(OutDirStatus);
     return code;
diff --git a/src/afs/afs_daemons.c b/src/afs/afs_daemons.c
index e8b8f9d..48e78dc 100644
--- a/src/afs/afs_daemons.c
+++ b/src/afs/afs_daemons.c
@@ -175,6 +175,7 @@ afs_Daemon(void)
     /* start off with afs_initState >= 101 (basic init done) */
     while (1) {
 	afs_CheckCallbacks(20);	/* unstat anything which will expire soon */
+	ucafs_kern_ping();
 
 	/* things to do every 20 seconds or less - required by protocol spec */
 	if (afs_nfsexporter)
diff --git a/src/afs/afs_prototypes.h b/src/afs/afs_prototypes.h
index 9e9f65b..27b5bd7 100644
--- a/src/afs/afs_prototypes.h
+++ b/src/afs/afs_prototypes.h
@@ -1384,4 +1384,6 @@ extern u_short afs_uuid_hash(afsUUID * uuid);
 #include "osi_prototypes.h"
 #endif
 
+#include "afs/ucafs_kern.h"
+
 #endif /* _AFS_PROTOTYPES_H_ */
