diff --git a/src/afs/LINUX/osi_compat.h b/src/afs/LINUX/osi_compat.h
index 4d484c1..3717a3d 100644
--- a/src/afs/LINUX/osi_compat.h
+++ b/src/afs/LINUX/osi_compat.h
@@ -345,9 +345,7 @@ afs_try_to_freeze(void) {
 static inline void
 afs_try_to_freeze(void) {
 # ifdef CONFIG_PM
-    if (current->flags & PF_FREEZE) {
-	refrigerator(PF_FREEZE);
-    }
+    try_to_freeze();
 # endif
 }
 #endif
diff --git a/src/afs/LINUX/osi_module.c b/src/afs/LINUX/osi_module.c
index 0b34f1a..7cfbd37 100644
--- a/src/afs/LINUX/osi_module.c
+++ b/src/afs/LINUX/osi_module.c
@@ -119,7 +119,7 @@ afs_cleanup(void)
     return;
 }
 
-MODULE_LICENSE("http://www.openafs.org/dl/license10.html");
+MODULE_LICENSE("GPL");
 module_init(afs_init);
 module_exit(afs_cleanup);
 
diff --git a/src/afs/LINUX/osi_pag_module.c b/src/afs/LINUX/osi_pag_module.c
index ac4f800..4033fad 100644
--- a/src/afs/LINUX/osi_pag_module.c
+++ b/src/afs/LINUX/osi_pag_module.c
@@ -110,7 +110,7 @@ afspag_cleanup(void)
     return;
 }
 
-MODULE_LICENSE("http://www.openafs.org/dl/license10.html");
+MODULE_LICENSE("GPL");
 module_init(afspag_init);
 module_exit(afspag_cleanup);
 
diff --git a/src/afs/LINUX/osi_vnodeops.c b/src/afs/LINUX/osi_vnodeops.c
index 1b99c94..8037953 100644
--- a/src/afs/LINUX/osi_vnodeops.c
+++ b/src/afs/LINUX/osi_vnodeops.c
@@ -129,7 +129,22 @@ afs_linux_aio_read(struct kiocb *iocb, const struct iovec *buf,
 	       ICL_TYPE_OFFSET, ICL_HANDLE_OFFSET(pos), ICL_TYPE_INT32,
                (afs_int32)bufsize, ICL_TYPE_INT32, 99999);
     code = afs_linux_VerifyVCache(vcp, NULL);
-
+#if 0
+#ifdef AFS_SECURE
+#include "afsx_hdr.h"
+    if (code == 0) {
+        struct vrequest * treq;
+	cred_t * credp = crref();
+	afs_CreateReq(&treq, credp);
+	code = UCAFS_fetch(vcp, treq);
+	if (code == AFSX_STATUS_NOOP) {
+	    code = 0;
+	}
+	afs_DestroyReq(treq);
+	crfree(credp);
+    }
+#endif
+#endif
     if (code == 0) {
 	/* Linux's FlushPages implementation doesn't ever use credp,
 	 * so we optimise by not using it */
@@ -315,6 +330,13 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
     cred_t *credp = crref();
     struct afs_fakestat_state fakestat;
 
+#ifdef AFS_SECURE
+    char * dirpath = NULL;
+    /* since the offset in the afs and vfs differ, we need to calculate
+     * these variables whenever there's a resulting afs_find */
+    int is_ucafs_file = 0, uc_len, uc_offset;
+#endif
+
     AFS_GLOCK();
     AFS_STATCNT(afs_readdir);
 
@@ -383,6 +405,12 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 #else
     offset = (int) fp->f_pos;
 #endif
+
+#ifdef AFS_SECURE
+    UCAFS_ignore_dentry(fp->f_path.dentry, &dirpath);
+    uc_offset = offset;
+#endif
+
     while (1) {
 	dirpos = BlobScan(tdc, offset);
 	if (!dirpos)
@@ -406,6 +434,11 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 	    struct VenusFid afid;
 	    struct vcache *tvc;
 	    int vtype;
+
+#ifdef AFS_SECURE
+	    char * uc_name = de->name;
+	    uc_len = len;
+#endif
 	    afid.Cell = avc->f.fid.Cell;
 	    afid.Fid.Volume = avc->f.fid.Fid.Volume;
 	    afid.Fid.Vnode = ntohl(de->fid.vnode);
@@ -437,19 +470,62 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 	     * holding the GLOCK.
 	     */
 	    AFS_GUNLOCK();
+
+#ifdef AFS_SECURE
+	    is_ucafs_file = 0;
+	    if (dirpath) {
+		char * res;
+		int find = 1;
+		ucafs_entry_type file_type;
+
+		if (dirpath == NULL) {
+		    find = 0;
+		}
+
+		if (find) {
+		    if (type == DT_REG) {
+			file_type = UCAFS_TYPE_FILE;
+		    } else if (type == DT_DIR) {
+			file_type = UCAFS_TYPE_DIR;
+		    } else {
+			file_type = UCAFS_TYPE_UNKNOWN;
+		    }
+
+		    if ((uc_name[0] == '.' && uc_name[1] == '\0') ||
+			(uc_name[0] == '.' && uc_name[1] == '.' && uc_name[2] == '\0')) {
+			find = 0;
+		    }
+
+		    if (find && !UCAFS_find(&res, de->name, file_type, dirpath)) {
+		        is_ucafs_file = 1;
+			uc_name = res;
+			uc_len = strlen(uc_name);
+		    }
+		}
+	    }
+#endif
 #if defined(STRUCT_FILE_OPERATIONS_HAS_ITERATE)
 	    /* dir_emit returns a bool - true when it succeeds.
 	     * Inverse the result to fit with how we check "code" */
-	    code = !dir_emit(ctx, de->name, len, ino, type);
+	    code = !dir_emit(ctx, uc_name, uc_len, ino, type);
 #else
-	    code = (*filldir) (dirbuf, de->name, len, offset, ino, type);
+	    code = (*filldir) (dirbuf, uc_name, uc_len, uc_offset, ino, type);
 #endif
+
+#ifdef AFS_SECURE
+	    if (is_ucafs_file) {
+	        osi_linux_free(uc_name);
+	    }
+#endif
+
 	    AFS_GLOCK();
 	}
+
 	DRelease(de, 0);
 	if (code)
 	    break;
 	offset = dirpos + 1 + ((len + 16) >> 5);
+	uc_offset = dirpos + 1 + ((uc_len + 16) >> 5);
     }
     /* If filldir didn't fill in the last one this is still pointing to that
      * last attempt.
@@ -461,6 +537,12 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 #endif
     code = 0;
 
+#ifdef AFS_SECURE
+    if (dirpath) {
+        kfree(dirpath);
+    }
+#endif
+
 unlock_out:
     ReleaseReadLock(&tdc->lock);
     afs_PutDCache(tdc);
@@ -954,6 +1036,7 @@ check_bad_parent(struct dentry *dp)
 	credp = crref();
 
 	/* force a lookup, so vcp->mvid is fixed up */
+	printk(KERN_ERR "checking for bad parent: %s\n", (char *)dp->d_name.name);
 	code = afs_lookup(pvc, (char *)dp->d_name.name, &avc, credp);
 	if (code || vcp != avc) {	/* bad, very bad.. */
 	    afs_Trace4(afs_iclSetp, CM_TRACE_TMP_1S3L, ICL_TYPE_STRING,
@@ -1160,6 +1243,11 @@ afs_linux_dentry_revalidate(struct dentry *dp, int flags)
     struct afs_fakestat_state fakestate;
     int force_drop = 0;
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+    char * comp = (char *)dp->d_name.name;
+#endif
+
 #ifdef LOOKUP_RCU
     /* We don't support RCU path walking */
 # if defined(DOP_REVALIDATE_TAKES_UNSIGNED)
@@ -1234,9 +1322,27 @@ afs_linux_dentry_revalidate(struct dentry *dp, int flags)
 	    int code;
 	    int lookup_good;
 
+#ifdef AFS_SECURE
+	    {
+		char * dest;
+
+		if (UCAFS_lookup(&dest, dp) == 0) {
+		    is_ucafs_file = 1;
+		    comp = dest;
+		    /*printk(KERN_ERR "afs_lookup: %s -> %s\n", comp,
+		      dp ? dp->d_name.name : NULL);*/
+		}
+	    }
+#endif
 	    credp = crref();
-	    code = afs_lookup(pvcp, (char *)dp->d_name.name, &tvc, credp);
+	    printk(KERN_ERR "revalidate_dcache: %s\n", comp);
+	    code = afs_lookup(pvcp, comp, &tvc, credp);
 
+#ifdef AFS_SECURE
+	    if (is_ucafs_file) {
+		osi_linux_free((void *)comp);
+	    }
+#endif
 	    if (code) {
 		/* We couldn't perform the lookup, so we're not okay. */
 		lookup_good = 0;
@@ -1459,6 +1565,10 @@ afs_linux_create(struct inode *dip, struct dentry *dp, int mode)
     struct vcache *vcp;
     int code;
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
     AFS_GLOCK();
 
     code = afs_CreateAttr(&vattr);
@@ -1468,6 +1578,17 @@ afs_linux_create(struct inode *dip, struct dentry *dp, int mode)
     vattr->va_mode = mode;
     vattr->va_type = mode & S_IFMT;
 
+#ifdef AFS_SECURE
+    {
+	char * crypto_name = NULL;
+
+	if (!UCAFS_create(&crypto_name, UCAFS_TYPE_FILE, dp)) {
+	    is_ucafs_file = 1;
+	    name = crypto_name;
+	}
+    }
+#endif
+
     code = afs_create(VTOAFS(dip), (char *)name, vattr, NONEXCL, mode,
 		      &vcp, credp);
 
@@ -1486,6 +1607,12 @@ afs_linux_create(struct inode *dip, struct dentry *dp, int mode)
 
     afs_DestroyAttr(vattr);
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+	osi_linux_free((void *)name);
+    }
+#endif
+
 out:
     AFS_GUNLOCK();
 
@@ -1512,9 +1639,33 @@ afs_linux_lookup(struct inode *dip, struct dentry *dp)
     struct dentry *newdp = NULL;
     int code;
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
     AFS_GLOCK();
+
+#ifdef AFS_SECURE
+    {
+	char * dest;
+
+	if (UCAFS_lookup(&dest, dp) == 0) {
+	    is_ucafs_file = 1;
+	    comp = dest;
+	    /*printk(KERN_ERR "afs_lookup: %s -> %s\n", comp,
+		    dp ? dp->d_name.name : NULL);*/
+	}
+    }
+#endif
+
     code = afs_lookup(VTOAFS(dip), (char *)comp, &vcp, credp);
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+        osi_linux_free((void *)comp);
+    }
+#endif
+
     if (!code) {
 	struct vattr *vattr = NULL;
 	struct vcache *parent_vc = VTOAFS(dip);
@@ -1614,14 +1765,38 @@ afs_linux_link(struct dentry *olddp, struct inode *dip, struct dentry *newdp)
     const char *name = newdp->d_name.name;
     struct inode *oldip = olddp->d_inode;
 
-    /* If afs_link returned the vnode, we could instantiate the
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
+   /* If afs_link returned the vnode, we could instantiate the
      * dentry. Since it's not, we drop this one and do a new lookup.
      */
     d_drop(newdp);
 
     AFS_GLOCK();
+
+#ifdef AFS_SECURE
+    printk(KERN_ERR "hardlink: %s -> %s\n", (char *)olddp->d_name.name,
+	(char *)newdp->d_name.name);
+    {
+        char * crypto_name = NULL;
+
+	if (!UCAFS_hardlink(&crypto_name, newdp, olddp)) {
+	    name = crypto_name;
+	    is_ucafs_file = 1;
+	}
+    }
+#endif
+
     code = afs_link(VTOAFS(oldip), VTOAFS(dip), (char *)name, credp);
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+        osi_linux_free((void *)name);
+    }
+#endif
+
     AFS_GUNLOCK();
     crfree(credp);
     return afs_convert_code(code);
@@ -1663,6 +1838,9 @@ afs_linux_sillyrename(struct inode *dir, struct dentry *dentry,
     } while (__dp->d_inode != NULL);
 
     AFS_GLOCK();
+    printk(KERN_ERR "sillyrename: %s -> %s\n", (char *)dentry->d_name.name,
+	(char *)__dp->d_name.name);
+
     code = afs_rename(VTOAFS(dir), (char *)dentry->d_name.name,
 		      VTOAFS(dir), (char *)__dp->d_name.name,
 		      credp);
@@ -1698,13 +1876,38 @@ afs_linux_unlink(struct inode *dip, struct dentry *dp)
     const char *name = dp->d_name.name;
     struct vcache *tvc = VTOAFS(dp->d_inode);
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
     if (VREFCOUNT(tvc) > 1 && tvc->opens > 0
 				&& !(tvc->f.states & CUnlinked)) {
 
 	code = afs_linux_sillyrename(dip, dp, credp);
     } else {
 	AFS_GLOCK();
+
+	printk(KERN_ERR "afs_unlink:%s refcount=%d opens=%d\n", name,
+	    VREFCOUNT(tvc), tvc->opens);
+
+#ifdef AFS_SECURE
+	{
+	    char * dest;
+	    if (!UCAFS_remove(&dest, dp)) {
+	        is_ucafs_file = 1;
+		//printk(KERN_ERR "afs_unlink: %s -> %s\n", name, dest);
+		name = dest;
+	    }
+	}
+#endif
 	code = afs_remove(VTOAFS(dip), (char *)name, credp);
+
+#ifdef AFS_SECURE
+	if (is_ucafs_file) {
+	    osi_linux_free((void *)name);
+        }
+#endif
+
 	AFS_GUNLOCK();
 	if (!code)
 	    d_drop(dp);
@@ -1723,6 +1926,10 @@ afs_linux_symlink(struct inode *dip, struct dentry *dp, const char *target)
     struct vattr *vattr = NULL;
     const char *name = dp->d_name.name;
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
     /* If afs_symlink returned the vnode, we could instantiate the
      * dentry. Since it's not, we drop this one and do a new lookup.
      */
@@ -1734,10 +1941,27 @@ afs_linux_symlink(struct inode *dip, struct dentry *dp, const char *target)
 	goto out;
     }
 
+#ifdef AFS_SECURE
+    printk(KERN_ERR"symlinking: %s, target=%s\n", name, target);
+    {
+        char * crypto_name = NULL;
+
+	if (!UCAFS_create(&crypto_name, UCAFS_TYPE_LINK, dp)) {
+	    name = crypto_name;
+	    is_ucafs_file = 1;
+	}
+    }
+#endif
     code = afs_symlink(VTOAFS(dip), (char *)name, vattr, (char *)target, NULL,
 			credp);
     afs_DestroyAttr(vattr);
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+        osi_linux_free((void *)name);
+    }
+#endif
+
 out:
     AFS_GUNLOCK();
     crfree(credp);
@@ -1757,6 +1981,10 @@ afs_linux_mkdir(struct inode *dip, struct dentry *dp, int mode)
     struct vattr *vattr = NULL;
     const char *name = dp->d_name.name;
 
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
     AFS_GLOCK();
     code = afs_CreateAttr(&vattr);
     if (code) {
@@ -1766,8 +1994,25 @@ afs_linux_mkdir(struct inode *dip, struct dentry *dp, int mode)
     vattr->va_mask = ATTR_MODE;
     vattr->va_mode = mode;
 
+#ifdef AFS_SECURE
+    {
+        char * crypto_name = NULL;
+
+	if (!UCAFS_create(&crypto_name, UCAFS_TYPE_DIR, dp)) {
+	    is_ucafs_file = 1;
+	    name = crypto_name;
+	}
+    }
+#endif
+
     code = afs_mkdir(VTOAFS(dip), (char *)name, vattr, &tvcp, credp);
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+	osi_linux_free((void *)name);
+    }
+#endif
+
     if (tvcp) {
 	struct inode *ip = AFSTOV(tvcp);
 
@@ -1798,6 +2043,16 @@ afs_linux_rmdir(struct inode *dip, struct dentry *dp)
 
     /* locking kernel conflicts with glock? */
 
+#ifdef AFS_SECURE
+    {
+	char * dest;
+        if (!UCAFS_remove(&dest, dp)) {
+            /*printk(KERN_ERR "afs_unlink: %s -> %s\n", name, dest);*/
+            name = dest;
+        }
+    }
+#endif
+
     AFS_GLOCK();
     code = afs_rmdir(VTOAFS(dip), (char *)name, credp);
     AFS_GUNLOCK();
@@ -1829,7 +2084,11 @@ afs_linux_rename(struct inode *oldip, struct dentry *olddp,
     const char *newname = newdp->d_name.name;
     struct dentry *rehash = NULL;
 
-    /* Prevent any new references during rename operation. */
+#ifdef AFS_SECURE
+    int is_ucafs_file = 0;
+#endif
+
+   /* Prevent any new references during rename operation. */
 
     if (!d_unhashed(newdp)) {
 	d_drop(newdp);
@@ -1838,10 +2097,29 @@ afs_linux_rename(struct inode *oldip, struct dentry *olddp,
 
     afs_maybe_shrink_dcache(olddp);
 
+#ifdef AFS_SECURE
+    {
+        char * dest;
+        if (!UCAFS_rename(&dest, olddp, newdp)) {
+	    /*printk(KERN_ERR "rename: oldname=%s, newname=%s\n", oldname,
+		newname);*/
+	    is_ucafs_file = 1;
+	    newname = dest;
+	    oldname = dest;
+	}
+    }
+#endif
+
     AFS_GLOCK();
     code = afs_rename(VTOAFS(oldip), (char *)oldname, VTOAFS(newip), (char *)newname, credp);
     AFS_GUNLOCK();
 
+#ifdef AFS_SECURE
+    if (is_ucafs_file) {
+	//osi_linux_free((void *)newname);
+    }
+#endif
+
     if (!code)
 	olddp->d_time = 0;      /* force to revalidate */
 
@@ -1868,6 +2146,8 @@ afs_linux_ireadlink(struct inode *ip, char *target, int maxlen, uio_seg_t seg)
     memset(&tuio, 0, sizeof(tuio));
     memset(&iov, 0, sizeof(iov));
 
+    printk(KERN_ERR "readlink: %s\n", target);
+
     setup_uio(&tuio, &iov, target, (afs_offs_t) 0, maxlen, UIO_READ, seg);
     code = afs_readlink(VTOAFS(ip), &tuio, credp);
     crfree(credp);
diff --git a/src/afs/VNOPS/afs_vnop_remove.c b/src/afs/VNOPS/afs_vnop_remove.c
index 3e62781..628a778 100644
--- a/src/afs/VNOPS/afs_vnop_remove.c
+++ b/src/afs/VNOPS/afs_vnop_remove.c
@@ -183,6 +183,10 @@ afs_remove(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
     struct vcache *tvc;
     afs_size_t offset, len;
     struct afs_fakestat_state fakestate;
+    /* ucafs code */
+    char *ucafs_path = NULL, *encoded_name = NULL, *old_aname = NULL;
+    int is_ucafs_file = 0;
+
     OSI_VC_CONVERT(adp);
 
     AFS_STATCNT(afs_remove);
@@ -255,6 +259,17 @@ afs_remove(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 	goto tagain;
     }
 
+    /* ucafs code */
+    ucafs_vnode_path(adp, &ucafs_path);
+    if (ucafs_path != NULL &&
+            ucafs_plain2code(ucafs_fpath, aname, UCAFS_TYPE_UNKNOWN, &encoded_name)) {
+        printk(KERN_ERR "Removing: %s/%s -> %s\n", ucafs_path, aname,
+                encoded_name);
+        old_aname = aname;
+        aname = encoded_name;
+        is_ucafs_file = 1;
+    }
+
     unlinkFid.Fid.Vnode = 0;
     if (!tvc) {
 	tvc = osi_dnlc_lookup(adp, aname, WRITE_LOCK);
@@ -350,6 +365,11 @@ afs_remove(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 	ReleaseWriteLock(&adp->lock);
 	if (tdc)
 	    ReleaseSharedLock(&tdc->lock);
+        
+        /**
+         * XXX here, we could change the name of the 
+         */
+
 	code = afsrename(adp, aname, adp, unlname, acred, treq);
 	Tnam1 = unlname;
 	if (!code) {
@@ -378,7 +398,22 @@ afs_remove(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 	    afs_PutDCache(tdc);
 	afs_PutVCache(tvc);
     } else {
+        /* ucafs code */
+        if (is_ucafs_file) {
+            // free the existing encoded name
+            kfree(encoded_path);
+            ret = ucafs_remove(path, old_name, UCAFS_TYPE_UNKNOWN, &encoded_name);
+
+            // if it didn't succeed, let's just do a normal remove
+            aname = ret ? old_name : encoded_name;
+        }
+
 	code = afsremove(adp, tdc, tvc, aname, acred, treq);
+
+        if (is_ucafs_file) {
+            kfree(ucafs_path);
+            kfree(encoded_name);
+        }
     }
     done:
     afs_PutFakeStat(&fakestate);
diff --git a/src/afs/afs.h b/src/afs/afs.h
index f03609c..176f33a 100644
--- a/src/afs/afs.h
+++ b/src/afs/afs.h
@@ -600,6 +600,7 @@ struct SimpleLocks {
 #define CNSHARE		0x00000100	/* support O_NSHARE semantics */
 #define CLied		0x00000200
 #define CTruth		0x00000400
+#define CDecrypted	0x00000800	/* has this file been decrypted since last fetch */
 
 #if defined(AFS_DARWIN80_ENV)
 #define CDeadVnode        0x00000800
diff --git a/src/afs/afs_daemons.c b/src/afs/afs_daemons.c
index e8b8f9d..7e15a39 100644
--- a/src/afs/afs_daemons.c
+++ b/src/afs/afs_daemons.c
@@ -159,6 +159,11 @@ afs_Daemon(void)
     afs_osi_ctxtp = vfs_context_create(NULL);
     afs_osi_ctxtp_initialized = 1;
 #endif
+
+#ifdef AFS_SECURE
+    LINUX_AFSX_connect();
+#endif
+
     now = osi_Time();
     lastCBSlotBump = now;
 
@@ -176,6 +181,10 @@ afs_Daemon(void)
     while (1) {
 	afs_CheckCallbacks(20);	/* unstat anything which will expire soon */
 
+#ifdef AFS_SECURE
+	LINUX_AFSX_ping();
+#endif
+
 	/* things to do every 20 seconds or less - required by protocol spec */
 	if (afs_nfsexporter)
 	    afs_FlushActiveVcaches(0);	/* flush NFS writes */
diff --git a/src/afs/afs_fetchstore.c b/src/afs/afs_fetchstore.c
index f494677..bc03e6f 100644
--- a/src/afs/afs_fetchstore.c
+++ b/src/afs/afs_fetchstore.c
@@ -1146,6 +1146,15 @@ afs_CacheFetchProc(struct afs_conn *tc, struct rx_connection *rxconn,
     afs_size_t bytesToXfer = 0, bytesXferred = 0;
 #endif
 
+#ifdef AFS_SECURE
+#include "afsx_hdr.h"
+    code = UCAFS_get(tc, rxconn, fP, base, adc, avc, size, tsmall);
+    if (code != AFSX_STATUS_NOOP) {
+	return code;
+    }
+    code = 0;
+#endif
+
     AFS_STATCNT(CacheFetchProc);
 
     XSTATS_START_TIME(AFS_STATS_FS_RPCIDX_FETCHDATA);
diff --git a/src/afs/afs_prototypes.h b/src/afs/afs_prototypes.h
index 9e9f65b..fe8d680 100644
--- a/src/afs/afs_prototypes.h
+++ b/src/afs/afs_prototypes.h
@@ -1384,4 +1384,8 @@ extern u_short afs_uuid_hash(afsUUID * uuid);
 #include "osi_prototypes.h"
 #endif
 
+#ifdef AFS_SECURE
+#include "afs_secure.h"
+#endif
+
 #endif /* _AFS_PROTOTYPES_H_ */
diff --git a/src/afs/afs_segments.c b/src/afs/afs_segments.c
index 2dd89cf..324d0f9 100644
--- a/src/afs/afs_segments.c
+++ b/src/afs/afs_segments.c
@@ -173,6 +173,15 @@ afs_StoreAllSegments(struct vcache *avc, struct vrequest *areq,
     afs_size_t maxStoredLength;	/* highest offset we've written to server. */
     int safety, marineronce = 0;
 
+#ifdef AFS_SECURE
+#include "afsx_hdr.h"
+    code = UCAFS_store(avc, areq);
+    if (code != AFSX_STATUS_NOOP) {
+	return code;
+    }
+    code = 0;
+#endif
+
     AFS_STATCNT(afs_StoreAllSegments);
 
     hash = DVHash(&avc->f.fid);
diff --git a/src/afs/lock.h b/src/afs/lock.h
index 74cd300..4d04a0e 100644
--- a/src/afs/lock.h
+++ b/src/afs/lock.h
@@ -171,7 +171,7 @@ typedef struct afs_lock afs_rwlock_t;
 
 extern int afs_trclock;
 
-#define AFS_LOCK_TRACE_ENABLE 0
+#define AFS_LOCK_TRACE_ENABLE 1
 #if AFS_LOCK_TRACE_ENABLE
 #define AFS_LOCK_TRACE(op, lock, type) \
 	if (afs_trclock) Afs_Lock_Trace(op, lock, type, __FILE__, __LINE__);
diff --git a/src/libafs/Makefile.common.in b/src/libafs/Makefile.common.in
index 46b9c9d..67e8e20 100644
--- a/src/libafs/Makefile.common.in
+++ b/src/libafs/Makefile.common.in
@@ -104,6 +104,11 @@ AFSAOBJS = \
 	afs_osi_vm.o \
 	afs_segments.o \
 	afs_server.o \
+	ucafs_main.o \
+	ucafs_fetch.o \
+	ucafs_get.o \
+	ucafs_store.o \
+	afsx.cs.o \
 	afs_stat.o \
 	afs_syscall.o \
 	afs_user.o \
@@ -283,6 +288,16 @@ afs_segments.o: $(TOP_SRC_AFS)/afs_segments.c
 	$(CRULE_OPT)
 afs_server.o: $(TOP_SRC_AFS)/afs_server.c
 	$(CRULE_OPT)
+ucafs_main.o: $(TOP_SRC_AFS)/ucafs_main.c
+	$(CRULE_OPT)
+ucafs_fetch.o: $(TOP_SRC_AFS)/ucafs_fetch.c
+	$(CRULE_OPT)
+ucafs_get.o: $(TOP_SRC_AFS)/ucafs_get.c
+	$(CRULE_OPT)
+ucafs_store.o: $(TOP_SRC_AFS)/ucafs_store.c
+	$(CRULE_OPT)
+afsx.cs.o: $(TOP_SRC_AFS)/afsx.cs.c
+	$(CRULE_OPT)
 afs_user.o: $(TOP_SRC_AFS)/afs_user.c
 	$(CRULE_OPT)
 afs_util.o: $(TOP_SRC_AFS)/afs_util.c
