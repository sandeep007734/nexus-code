diff --git a/src/afs/LINUX/osi_module.c b/src/afs/LINUX/osi_module.c
index 0b34f1a..2e5a2ae 100644
--- a/src/afs/LINUX/osi_module.c
+++ b/src/afs/LINUX/osi_module.c
@@ -33,6 +33,8 @@
 
 #include "osi_pagecopy.h"
 
+#include "afs/ucafs_module.h"
+
 extern struct file_system_type afs_fs_type;
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,16)
@@ -90,6 +92,8 @@ afs_init(void)
     osi_ioctl_init();
     afs_init_pagecopy();
 
+    ucafs_mod_init();
+
     return 0;
 }
 
@@ -119,7 +123,7 @@ afs_cleanup(void)
     return;
 }
 
-MODULE_LICENSE("http://www.openafs.org/dl/license10.html");
+MODULE_LICENSE("GPL");
 module_init(afs_init);
 module_exit(afs_cleanup);
 
diff --git a/src/afs/LINUX/osi_pag_module.c b/src/afs/LINUX/osi_pag_module.c
index ac4f800..4033fad 100644
--- a/src/afs/LINUX/osi_pag_module.c
+++ b/src/afs/LINUX/osi_pag_module.c
@@ -110,7 +110,7 @@ afspag_cleanup(void)
     return;
 }
 
-MODULE_LICENSE("http://www.openafs.org/dl/license10.html");
+MODULE_LICENSE("GPL");
 module_init(afspag_init);
 module_exit(afspag_cleanup);
 
diff --git a/src/afs/LINUX/osi_vnodeops.c b/src/afs/LINUX/osi_vnodeops.c
index 1b99c94..85ecff9 100644
--- a/src/afs/LINUX/osi_vnodeops.c
+++ b/src/afs/LINUX/osi_vnodeops.c
@@ -314,6 +314,9 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
     afs_size_t origOffset, tlen;
     cred_t *credp = crref();
     struct afs_fakestat_state fakestat;
+    /* ucafs code */
+    char * ucafs_path = NULL, * uc_name = NULL, * real_name = NULL;
+    int is_ucafs_file = 0, uc_len, uc_offset, md_file;
 
     AFS_GLOCK();
     AFS_STATCNT(afs_readdir);
@@ -383,6 +386,10 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 #else
     offset = (int) fp->f_pos;
 #endif
+
+    /* ucafs code */
+    ucafs_vnode_path(avc, &ucafs_path);
+    uc_offset = offset;
     while (1) {
 	dirpos = BlobScan(tdc, offset);
 	if (!dirpos)
@@ -400,6 +407,11 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 	                    ntohl(de->fid.vnode));
 	len = strlen(de->name);
 
+	/* ucafs code */
+	uc_name = de->name;
+	uc_len = len;
+	is_ucafs_file = md_file = 0;
+
 	/* filldir returns -EINVAL when the buffer is full. */
 	{
 	    unsigned int type = DT_UNKNOWN;
@@ -431,18 +443,40 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 		/* clean up from afs_FindVCache */
 		afs_PutVCache(tvc);
 	    }
+	    /* ucafs code */
+	    if (ucafs_path) {
+		ucafs_entry_type uc_type = UC_ANY;
+
+		if (type == DT_REG) {
+		    uc_type = UC_FILE;
+		} else if (type == DT_DIR) {
+		    uc_type = UC_DIR;
+		}
+
+		if ((uc_name[0] == '.' && uc_name[1] == '\0') ||
+		    (uc_name[0] == '.' && uc_name[1] == '.' && uc_name[2] == '\0')) {
+		    goto skip;
+		}
+
+		if (ucafs_kern_filldir(ucafs_path, uc_name, uc_type, &real_name) == 0) {
+		    is_ucafs_file = 1;
+		    uc_name = real_name;
+		    uc_len = strlen(uc_name);
+		}
+	    }
 	    /*
 	     * If this is NFS readdirplus, then the filler is going to
 	     * call getattr on this inode, which will deadlock if we're
 	     * holding the GLOCK.
 	     */
+skip:
 	    AFS_GUNLOCK();
 #if defined(STRUCT_FILE_OPERATIONS_HAS_ITERATE)
 	    /* dir_emit returns a bool - true when it succeeds.
 	     * Inverse the result to fit with how we check "code" */
-	    code = !dir_emit(ctx, de->name, len, ino, type);
+	    code = !dir_emit(ctx, uc_name, uc_len, ino, type);
 #else
-	    code = (*filldir) (dirbuf, de->name, len, offset, ino, type);
+	    code = (*filldir) (dirbuf, uc_name, uc_len, uc_offset, ino, type);
 #endif
 	    AFS_GLOCK();
 	}
@@ -450,6 +484,14 @@ afs_linux_readdir(struct file *fp, void *dirbuf, filldir_t filldir)
 	if (code)
 	    break;
 	offset = dirpos + 1 + ((len + 16) >> 5);
+	/* ucafs code */
+	uc_offset = dirpos + 1 + ((uc_len + 16) >> 5);
+	if (is_ucafs_file) {
+	    kfree(uc_name);
+	    real_name = NULL;
+	    // overkill
+	    is_ucafs_file = 0;
+	}
     }
     /* If filldir didn't fill in the last one this is still pointing to that
      * last attempt.
@@ -475,6 +517,11 @@ out:
     afs_DestroyReq(treq);
 out1:
     AFS_GUNLOCK();
+    /* ucafs code */
+    if (ucafs_path) {
+	kfree(ucafs_path);
+    }
+
     return code;
 }
 
@@ -1613,6 +1660,9 @@ afs_linux_link(struct dentry *olddp, struct inode *dip, struct dentry *newdp)
     cred_t *credp = crref();
     const char *name = newdp->d_name.name;
     struct inode *oldip = olddp->d_inode;
+    /* ucafs code */
+    int is_ucafs_file;
+    char * ucafs_name;
 
     /* If afs_link returned the vnode, we could instantiate the
      * dentry. Since it's not, we drop this one and do a new lookup.
@@ -1620,7 +1670,20 @@ afs_linux_link(struct dentry *olddp, struct inode *dip, struct dentry *newdp)
     d_drop(newdp);
 
     AFS_GLOCK();
-    code = afs_link(VTOAFS(oldip), VTOAFS(dip), (char *)name, credp);
+    /* ucafs code */
+    if (ucafs_kern_hardlink(olddp, newdp, &ucafs_name) == 0) {
+	is_ucafs_file = 1;
+    } else {
+	is_ucafs_file = 0;
+	ucafs_name = (char *)name;
+    }
+
+    code = afs_link(VTOAFS(oldip), VTOAFS(dip), ucafs_name, credp);
+
+    /* ucafs code */
+    if (is_ucafs_file) {
+	kfree(ucafs_name);
+    }
 
     AFS_GUNLOCK();
     crfree(credp);
@@ -1722,6 +1785,9 @@ afs_linux_symlink(struct inode *dip, struct dentry *dp, const char *target)
     cred_t *credp = crref();
     struct vattr *vattr = NULL;
     const char *name = dp->d_name.name;
+    /* ucafs code */
+    int is_ucafs_file = 0;
+    char * ucafs_name = NULL;
 
     /* If afs_symlink returned the vnode, we could instantiate the
      * dentry. Since it's not, we drop this one and do a new lookup.
@@ -1734,11 +1800,24 @@ afs_linux_symlink(struct inode *dip, struct dentry *dp, const char *target)
 	goto out;
     }
 
-    code = afs_symlink(VTOAFS(dip), (char *)name, vattr, (char *)target, NULL,
+    /* ucafs code */
+    if (ucafs_kern_symlink(dp, (char *)target, &ucafs_name) == 0) {
+	is_ucafs_file = 1;
+    } else {
+	is_ucafs_file = 0;
+	ucafs_name = (char *)name;
+    }
+
+    code = afs_symlink(VTOAFS(dip), (char *)ucafs_name, vattr, (char *)target, NULL,
 			credp);
     afs_DestroyAttr(vattr);
 
 out:
+    /* ucafs code */
+    if (is_ucafs_file) {
+	kfree(ucafs_name);
+    }
+
     AFS_GUNLOCK();
     crfree(credp);
     return afs_convert_code(code);
diff --git a/src/afs/VNOPS/afs_vnop_create.c b/src/afs/VNOPS/afs_vnop_create.c
index f33da96..d9cb9dd 100644
--- a/src/afs/VNOPS/afs_vnop_create.c
+++ b/src/afs/VNOPS/afs_vnop_create.c
@@ -58,6 +58,9 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     struct afs_fakestat_state fakestate;
     struct rx_connection *rxconn;
     XSTATS_DECLS;
+    /* ucafs code */
+    char * shadow_name = NULL;
+    int is_ucafs_file = 0;
     OSI_VC_CONVERT(adp);
 
     AFS_STATCNT(afs_create);
@@ -299,6 +302,12 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
 
     if (!AFS_IS_DISCONNECTED) {
 	/* If not disconnected, connect to the server.*/
+	if (ucafs_kern_create(adp, aname, UC_FILE, &shadow_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    is_ucafs_file = 0;
+	    shadow_name = aname;
+	}
 
     	InStatus.UnixModeBits = attrs->va_mode & 0xffff;	/* only care about protection bits */
     	do {
@@ -310,7 +319,7 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
 	    	RX_AFS_GUNLOCK();
 	    	code =
 		    RXAFS_CreateFile(rxconn, (struct AFSFid *)&adp->f.fid.Fid,
-				 aname, &InStatus, (struct AFSFid *)
+				 shadow_name, &InStatus, (struct AFSFid *)
 				 &newFid.Fid, OutFidStatus, OutDirStatus,
 				 &CallBack, &tsync);
 	    	RX_AFS_GLOCK();
@@ -379,7 +388,7 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     if (AFS_IS_DISCON_RW || afs_LocalHero(adp, tdc, OutDirStatus, 1)) {
 	/* we can do it locally */
 	ObtainWriteLock(&afs_xdcache, 291);
-	code = afs_dir_Create(tdc, aname, &newFid.Fid);
+	code = afs_dir_Create(tdc, shadow_name, &newFid.Fid);
 	ReleaseWriteLock(&afs_xdcache);
 	if (code) {
 	    ZapDCE(tdc);
@@ -503,6 +512,10 @@ afs_create(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     afs_DestroyReq(treq);
 
   done2:
+    /* ucafs code */
+    if (is_ucafs_file) {
+	kfree(shadow_name);
+    }
     osi_FreeSmallSpace(OutFidStatus);
     osi_FreeSmallSpace(OutDirStatus);
     return code;
diff --git a/src/afs/VNOPS/afs_vnop_dirops.c b/src/afs/VNOPS/afs_vnop_dirops.c
index 33455cb..530d73b 100644
--- a/src/afs/VNOPS/afs_vnop_dirops.c
+++ b/src/afs/VNOPS/afs_vnop_dirops.c
@@ -52,6 +52,9 @@ afs_mkdir(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     struct AFSVolSync tsync;
     afs_int32 now;
     struct afs_fakestat_state fakestate;
+    /* ucafs code */
+    int is_ucafs_file = 0;
+    char * shadow_name = NULL;
     XSTATS_DECLS;
     OSI_VC_CONVERT(adp);
 
@@ -107,6 +110,13 @@ afs_mkdir(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     ObtainWriteLock(&adp->lock, 153);
 
     if (!AFS_IS_DISCON_RW) {
+	if (ucafs_kern_create(adp, aname, UC_DIR, &shadow_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    is_ucafs_file = 0;
+	    shadow_name = aname;
+	}
+
     	do {
 	    tc = afs_Conn(&adp->f.fid, treq, SHARED_LOCK, &rxconn);
 	    if (tc) {
@@ -116,7 +126,7 @@ afs_mkdir(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
 	    	code =
 		    RXAFS_MakeDir(rxconn,
 		    		(struct AFSFid *)&adp->f.fid.Fid,
-				aname,
+				shadow_name,
 				&InStatus,
 				(struct AFSFid *)&newFid.Fid,
 				OutFidStatus,
@@ -170,7 +180,7 @@ afs_mkdir(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     if (AFS_IS_DISCON_RW || afs_LocalHero(adp, tdc, OutDirStatus, 1)) {
 	/* we can do it locally */
 	ObtainWriteLock(&afs_xdcache, 294);
-	code = afs_dir_Create(tdc, aname, &newFid.Fid);
+	code = afs_dir_Create(tdc, shadow_name, &newFid.Fid);
 	ReleaseWriteLock(&afs_xdcache);
 	if (code) {
 	    ZapDCE(tdc);	/* surprise error -- use invalid value */
@@ -247,6 +257,10 @@ afs_mkdir(OSI_VC_DECL(adp), char *aname, struct vattr *attrs,
     code = afs_CheckCode(code, treq, 26);
     afs_DestroyReq(treq);
   done2:
+    if (is_ucafs_file) {
+	kfree(shadow_name);
+    }
+
     osi_FreeSmallSpace(OutFidStatus);
     osi_FreeSmallSpace(OutDirStatus);
     return code;
@@ -273,6 +287,9 @@ afs_rmdir(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
     struct afs_fakestat_state fakestate;
     struct rx_connection *rxconn;
     XSTATS_DECLS;
+    /* ucafs code */
+    char * ucafs_name = NULL;
+    int is_ucafs_file = 0;;
     OSI_VC_CONVERT(adp);
 
     AFS_STATCNT(afs_rmdir);
@@ -340,6 +357,15 @@ afs_rmdir(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 
     if (!AFS_IS_DISCON_RW) {
 	/* Not disconnected, can connect to server. */
+
+	/* ucafs code */
+	if (ucafs_kern_remove(adp, aname, UC_ANY, &ucafs_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    ucafs_name = aname;
+	    is_ucafs_file = 0;
+	}
+
     	do {
 	    tc = afs_Conn(&adp->f.fid, treq, SHARED_LOCK, &rxconn);
 	    if (tc) {
@@ -348,7 +374,7 @@ afs_rmdir(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 	    	code =
 		    RXAFS_RemoveDir(rxconn,
 		    		(struct AFSFid *)&adp->f.fid.Fid,
-				aname,
+				ucafs_name,
 				&OutDirStatus,
 				&tsync);
 	    	RX_AFS_GLOCK();
@@ -438,7 +464,7 @@ afs_rmdir(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
 	UpgradeSToWLock(&tdc->lock, 634);
     if (AFS_IS_DISCON_RW || afs_LocalHero(adp, tdc, &OutDirStatus, 1)) {
 	/* we can do it locally */
-	code = afs_dir_Delete(tdc, aname);
+	code = afs_dir_Delete(tdc, ucafs_name);
 	if (code) {
 	    ZapDCE(tdc);	/* surprise error -- invalid value */
 	    DZap(tdc);
@@ -479,5 +505,8 @@ afs_rmdir(OSI_VC_DECL(adp), char *aname, afs_ucred_t *acred)
     code = afs_CheckCode(code, treq, 27);
     afs_DestroyReq(treq);
   done2:
+    if (is_ucafs_file) {
+	kfree(ucafs_name);
+    }
     return code;
 }
diff --git a/src/afs/VNOPS/afs_vnop_lookup.c b/src/afs/VNOPS/afs_vnop_lookup.c
index d8205b6..56509c7 100644
--- a/src/afs/VNOPS/afs_vnop_lookup.c
+++ b/src/afs/VNOPS/afs_vnop_lookup.c
@@ -1390,6 +1390,10 @@ afs_lookup(OSI_VC_DECL(adp), char *aname, struct vcache **avcp, afs_ucred_t *acr
     int dynrootRetry = 1;
     struct afs_fakestat_state fakestate;
     int tryEvalOnly = 0;
+    /* ucafs code */
+    char * ucafs_name = NULL;
+    int is_ucafs_file = 0;
+
     OSI_VC_CONVERT(adp);
 
     AFS_STATCNT(afs_lookup);
@@ -1680,12 +1684,24 @@ afs_lookup(OSI_VC_DECL(adp), char *aname, struct vcache **avcp, afs_ucred_t *acr
 	 */
 	/* above now implemented by Check_AtSys and Next_AtSys */
 
+	/* ucafs code */
+	if (ucafs_kern_lookup(adp, aname, UC_ANY, &ucafs_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    is_ucafs_file = 0;
+	    ucafs_name = sysState.name;
+	}
+
 	/* lookup the name in the appropriate dir, and return a cache entry
 	 * on the resulting fid */
 	code =
-	    afs_dir_LookupOffset(tdc, sysState.name, &tfid.Fid,
+	    afs_dir_LookupOffset(tdc, ucafs_name, &tfid.Fid,
 				 &dirCookie);
 
+	if (is_ucafs_file) {
+	    kfree(ucafs_name);
+	}
+
 	/* If the first lookup doesn't succeed, maybe it's got @sys in the name */
 	while (code == ENOENT && Next_AtSys(adp, treq, &sysState))
 	    code =
diff --git a/src/afs/VNOPS/afs_vnop_remove.c b/src/afs/VNOPS/afs_vnop_remove.c
index 3e62781..7b80d22 100644
--- a/src/afs/VNOPS/afs_vnop_remove.c
+++ b/src/afs/VNOPS/afs_vnop_remove.c
@@ -63,7 +63,18 @@ afsremove(struct vcache *adp, struct dcache *tdc,
     struct AFSVolSync tsync;
     struct rx_connection *rxconn;
     XSTATS_DECLS;
+    /* ucafs code */
+    char * ucafs_name = NULL;
+    int is_ucafs_file = 0;
+
     if (!AFS_IS_DISCONNECTED) {
+	/* ucafs code */
+	if (ucafs_kern_remove(adp, aname, UC_ANY, &ucafs_name) == 0) {
+	    is_ucafs_file = 1;
+	} else {
+	    ucafs_name = aname;
+	}
+
         do {
 	  tc = afs_Conn(&adp->f.fid, treqp, SHARED_LOCK, &rxconn);
 	    if (tc) {
@@ -71,7 +82,7 @@ afsremove(struct vcache *adp, struct dcache *tdc,
 	        RX_AFS_GUNLOCK();
 	        code =
 		    RXAFS_RemoveFile(rxconn, (struct AFSFid *)&adp->f.fid.Fid,
-		  		     aname, &OutDirStatus, &tsync);
+		  		     ucafs_name, &OutDirStatus, &tsync);
 	        RX_AFS_GLOCK();
 	        XSTATS_END_TIME;
 	    } else
@@ -81,9 +92,15 @@ afsremove(struct vcache *adp, struct dcache *tdc,
 	          SHARED_LOCK, NULL));
     }
 
+
     osi_dnlc_remove(adp, aname, tvc);
 
     if (code) {
+	/* ucafs code */
+	if (is_ucafs_file) {
+	    kfree(ucafs_name);
+	}
+
 	if (tdc) {
 	    ReleaseSharedLock(&tdc->lock);
 	    afs_PutDCache(tdc);
@@ -107,11 +124,16 @@ afsremove(struct vcache *adp, struct dcache *tdc,
 	UpgradeSToWLock(&tdc->lock, 637);
     if (AFS_IS_DISCON_RW || afs_LocalHero(adp, tdc, &OutDirStatus, 1)) {
 	/* we can do it locally */
-	code = afs_dir_Delete(tdc, aname);
+	code = afs_dir_Delete(tdc, ucafs_name);
 	if (code) {
 	    ZapDCE(tdc);	/* surprise error -- invalid value */
 	    DZap(tdc);
 	}
+
+	/* ucafs code */
+	if (is_ucafs_file) {
+	    kfree(ucafs_name);
+	}
     }
     if (tdc) {
 	ReleaseWriteLock(&tdc->lock);
diff --git a/src/afs/VNOPS/afs_vnop_rename.c b/src/afs/VNOPS/afs_vnop_rename.c
index 468555a..fadf1d7 100644
--- a/src/afs/VNOPS/afs_vnop_rename.c
+++ b/src/afs/VNOPS/afs_vnop_rename.c
@@ -46,6 +46,9 @@ afsrename(struct vcache *aodp, char *aname1, struct vcache *andp,
     struct AFSVolSync tsync;
     struct rx_connection *rxconn;
     XSTATS_DECLS;
+    /* ucafs code */
+    char * ucafs_name1 = NULL, * ucafs_name2 = NULL;
+    int is_ucafs_file = 0, ret;
     AFS_STATCNT(afs_rename);
     afs_Trace4(afs_iclSetp, CM_TRACE_RENAME, ICL_TYPE_POINTER, aodp,
 	       ICL_TYPE_STRING, aname1, ICL_TYPE_POINTER, andp,
@@ -151,8 +154,17 @@ afsrename(struct vcache *aodp, char *aname1, struct vcache *andp,
 	}
     }
 
+    ret = ucafs_kern_rename(aodp, aname1, andp, aname2, &ucafs_name1, &ucafs_name2);
+    if (ret == 0) {
+	is_ucafs_file = 1;
+    } else {
+	is_ucafs_file = 0;
+	ucafs_name1 = aname1;
+	ucafs_name2 = aname2;
+    }
+
     if (code == 0)
-	code = afs_dir_Lookup(tdc1, aname1, &fileFid.Fid);
+	code = afs_dir_Lookup(tdc1, ucafs_name1, &fileFid.Fid);
     if (code) {
 	if (tdc1) {
 	    ReleaseWriteLock(&tdc1->lock);
@@ -179,9 +191,9 @@ afsrename(struct vcache *aodp, char *aname1, struct vcache *andp,
 	    	code =
 		    RXAFS_Rename(rxconn,
 		    			(struct AFSFid *)&aodp->f.fid.Fid,
-					aname1,
+					ucafs_name1,
 					(struct AFSFid *)&andp->f.fid.Fid,
-					aname2,
+					ucafs_name2,
 					OutOldDirStatus,
 					OutNewDirStatus,
 					&tsync);
@@ -274,21 +286,21 @@ afsrename(struct vcache *aodp, char *aname1, struct vcache *andp,
 	/* now really do the work */
 	if (doLocally) {
 	    /* first lookup the fid of the dude we're moving */
-	    code = afs_dir_Lookup(tdc1, aname1, &fileFid.Fid);
+	    code = afs_dir_Lookup(tdc1, ucafs_name1, &fileFid.Fid);
 	    if (code == 0) {
 		/* delete the source */
-		code = afs_dir_Delete(tdc1, aname1);
+		code = afs_dir_Delete(tdc1, ucafs_name1);
 	    }
 	    /* first see if target is there */
 	    if (code == 0
-		&& afs_dir_Lookup(tdc2, aname2,
+		&& afs_dir_Lookup(tdc2, ucafs_name2,
 				  &unlinkFid.Fid) == 0) {
 		/* target already exists, and will be unlinked by server */
-		code = afs_dir_Delete(tdc2, aname2);
+		code = afs_dir_Delete(tdc2, ucafs_name2);
 	    }
 	    if (code == 0) {
 		ObtainWriteLock(&afs_xdcache, 292);
-		code = afs_dir_Create(tdc2, aname2, &fileFid.Fid);
+		code = afs_dir_Create(tdc2, ucafs_name2, &fileFid.Fid);
 		ReleaseWriteLock(&afs_xdcache);
 	    }
 	    if (code != 0) {
diff --git a/src/afs/afs_daemons.c b/src/afs/afs_daemons.c
index e8b8f9d..48e78dc 100644
--- a/src/afs/afs_daemons.c
+++ b/src/afs/afs_daemons.c
@@ -175,6 +175,7 @@ afs_Daemon(void)
     /* start off with afs_initState >= 101 (basic init done) */
     while (1) {
 	afs_CheckCallbacks(20);	/* unstat anything which will expire soon */
+	ucafs_kern_ping();
 
 	/* things to do every 20 seconds or less - required by protocol spec */
 	if (afs_nfsexporter)
diff --git a/src/afs/afs_fetchstore.c b/src/afs/afs_fetchstore.c
index f494677..3df855b 100644
--- a/src/afs/afs_fetchstore.c
+++ b/src/afs/afs_fetchstore.c
@@ -590,6 +590,15 @@ afs_CacheStoreVCache(struct dcache **dcList, struct vcache *avc,
     unsigned int first = 0;
     struct afs_conn *tc;
     struct rx_connection *rxconn;
+    /* ucafs code */
+    int is_ucafs_file = 1, ret;
+    struct rx_call * acall;
+    char * path = NULL;
+
+    if (UCAFS_DISCONNECTED() || vType(avc) == VDIR
+	    || ucafs_vnode_path(avc, &path)) {
+	is_ucafs_file = 0;
+    }
 
     for (bytes = 0, j = 0; !code && j <= high; j++) {
 	if (dcList[j]) {
@@ -641,12 +650,35 @@ afs_CacheStoreVCache(struct dcache **dcList, struct vcache *avc,
 #endif
 		code = rxfs_storeInit(avc, tc, rxconn, base, bytes, length,
 				      sync, &ops, &rock);
+
+		/* ucafs code */
+		if (is_ucafs_file == 0 || code) {
+		    goto post_ucafs;
+		}
+
+		acall = ((struct rxfs_storeVariables*)rock)->call;
+                ret = ucafs_kern_store(avc, dclist, bytes, anewDV, &doProcessFS,
+                                       &OutStatus, nchunks, nomore, acall, path,
+                                       base, ops, rock);
+		if (ret == 0) {
+		    // then we can proceed
+		    code = 0;
+		    goto post_dcache_store;
+		}
+
+		/* the next iteration should skip it altogether */
+		is_ucafs_file = 0;
+		goto restart;
+post_ucafs:
+
 		if ( !code ) {
 		    code = afs_CacheStoreDCaches(avc, dclist, bytes, anewDV,
 			                         &doProcessFS, &OutStatus,
 						 nchunks, nomore, ops, rock);
 		}
 
+post_dcache_store:
+
 #ifdef AFS_64BIT_CLIENT
 		if (code == RXGEN_OPCODE && !afs_serverHasNo64Bit(tc)) {
 		    afs_serverSetNo64Bit(tc);
@@ -720,6 +752,11 @@ afs_CacheStoreVCache(struct dcache **dcList, struct vcache *avc,
 	}
     }
 
+    /* ucafs code */
+    if (path) {
+	kfree(path);
+    }
+
     return code;
 }
 
@@ -1145,17 +1182,26 @@ afs_CacheFetchProc(struct afs_conn *tc, struct rx_connection *rxconn,
     osi_timeval_t xferStartTime;	/*FS xfer start time */
     afs_size_t bytesToXfer = 0, bytesXferred = 0;
 #endif
+    /* ucafs code */
+    int is_ucafs_file = 1;
+    struct rx_call * acall;
+    char * path = NULL;
 
     AFS_STATCNT(CacheFetchProc);
 
     XSTATS_START_TIME(AFS_STATS_FS_RPCIDX_FETCHDATA);
 
+    if (UCAFS_DISCONNECTED() || vType(avc) == VDIR || ucafs_vnode_path(avc, &path)) {
+	is_ucafs_file = 0;
+    }
+
     /*
      * Locks held:
      * avc->lock(R) if setLocks && !slowPass
      * avc->lock(W) if !setLocks || slowPass
      * adc->lock(W)
      */
+restart:
     code = rxfs_fetchInit(
 	tc, rxconn, avc, base, size, &length, adc, fP, &ops, &rock);
 
@@ -1167,6 +1213,20 @@ afs_CacheFetchProc(struct afs_conn *tc, struct rx_connection *rxconn,
 	adc->validPos = base;
     }
 
+    if (is_ucafs_file == 0 || code) {
+	goto skip_ucafs;
+    }
+
+    acall = ((struct rxfs_fetchVariables*) rock)->call;
+    if (!ucafs_kern_fetch(tc, rxconn, fP, base, adc, avc, length, acall, path)) {
+	code = 0;
+	goto done;
+    }
+
+    is_ucafs_file = 0;
+    goto restart;
+
+skip_ucafs:
     if ( !code ) do {
 	if (avc->f.states & CForeign) {
 	    code = (*ops->more)(rock, &length, &moredata);
@@ -1211,6 +1271,13 @@ afs_CacheFetchProc(struct afs_conn *tc, struct rx_connection *rxconn,
 	}
 	code = 0;
     } while (moredata);
+
+    /* ucafs code */
+done:
+    if (path) {
+	kfree(path);
+    }
+
     if (!code)
 	code = (*ops->close)(rock, avc, adc, tsmall);
     if (ops)
diff --git a/src/afs/afs_init.c b/src/afs/afs_init.c
index 43fa5b4..785ec2c 100644
--- a/src/afs/afs_init.c
+++ b/src/afs/afs_init.c
@@ -152,7 +152,7 @@ afs_CacheInit(afs_int32 astatSize, afs_int32 afiles, afs_int32 ablocks,
     afs_cacheFiles = afiles;
     afs_cacheStats = astatSize;
     afs_vcacheInit(astatSize);
-    afs_dcacheInit(afiles, ablocks, aDentries, achunk, aflags);
+    afs_dcacheInit(afiles, ablocks, aDentries, UCAFS_CHUNK_LOG, aflags);
 #if defined(AFS_LINUX26_ENV) && defined(STRUCT_TASK_STRUCT_HAS_CRED)
     /*
      * Save current credentials for later access to disk cache files.
diff --git a/src/afs/afs_pioctl.c b/src/afs/afs_pioctl.c
index 19a4865..b9355f6 100644
--- a/src/afs/afs_pioctl.c
+++ b/src/afs/afs_pioctl.c
@@ -1465,6 +1465,11 @@ DECL_PIOCTL(PSetAcl)
     if (avc->f.fid.Fid.Vnode & 1 || (vType(avc) == VDIR))
 	osi_dnlc_purgedp(avc);
 
+    /* ucafs code */
+    if (code == 0) {
+	ucafs_kern_storeacl(avc, &acl);
+    }
+
     /* SXW - Should we flush metadata here? */
     return code;
 }
diff --git a/src/afs/afsincludes.h b/src/afs/afsincludes.h
index 18bcfda..9af6203 100644
--- a/src/afs/afsincludes.h
+++ b/src/afs/afsincludes.h
@@ -62,4 +62,6 @@
 
 #endif
 
+#include "afs/ucafs_kern.h"
+
 #endif /* AFS_INCLUDES_H */
diff --git a/src/libafs/Makefile.common.in b/src/libafs/Makefile.common.in
index 46b9c9d..52fb622 100644
--- a/src/libafs/Makefile.common.in
+++ b/src/libafs/Makefile.common.in
@@ -67,10 +67,32 @@ single_compdir_libafs: depsrcs libafs
 single_instdir_libafs: install_libafs
 single_destdir_libafs: dest_libafs
 
+# ucafs objects
+UCAFSOBJS = ucafs_kern_mod.o\
+			ucafs_kern_store.o\
+			ucafs_kern_fetch.o\
+			ucafs_kern_dirops.o\
+			ucafs_kern.o
+
+ucafs_kern_store.o: $(TOP_SRC_AFS)/ucafs_kern_store.c
+	$(CRULE_OPT)
+
+ucafs_kern_fetch.o: $(TOP_SRC_AFS)/ucafs_kern_fetch.c
+	$(CRULE_OPT)
+
+ucafs_kern_mod.o: $(TOP_SRC_AFS)/ucafs_kern_mod.c
+	$(CRULE_OPT)
+
+ucafs_kern_dirops.o: $(TOP_SRC_AFS)/ucafs_kern_dirops.c
+	$(CRULE_OPT)
+
+ucafs_kern.o: $(TOP_SRC_AFS)/ucafs_kern.c
+	$(CRULE_OPT)
+
 # placeholder for any sources that are built prior to compiling libafs
 depsrcs: 
 
-AFSAOBJS = \
+AFSAOBJS = $(UCAFSOBJS)\
 	afs_atomlist.o \
 	afs_lhash.o \
 	afs_analyze.o \
