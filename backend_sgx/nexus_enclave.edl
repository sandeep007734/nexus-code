enclave {
    include "sgx_backend_common.h"

    trusted {

        /**
         * Initializes the enclave with the specified backend info
         * @param backend_info
         * @return 0 on success
         */
        public int ecall_init_enclave
        (
            [user_check] void * backend_info
        );


        // volume management

        /**
         * Creates a new volume
         *
         * @param user_pubkey_in
         * @param supernode_uuid_out
         * @param volkey_buffer_uuid_out
         */
        public int ecall_create_volume
        (
            [in, string] char              * user_pubkey_IN,
            [user_check] struct nexus_uuid * supernode_uuid_out,
            [user_check] struct nexus_uuid * volkey_buffer_uuid_out
        );

        public int ecall_authentication_challenge
        (
            [in, string] char                   * user_pubkey_IN,
            [in]         struct nexus_uuid      * volkey_bufuuid_in,
            [user_check] struct nonce_challenge * challenge_out
        );

        public int ecall_authentication_response
        (
            [in] struct nexus_uuid * supernode_bufuuid_in,
            [in] struct nexus_uuid * signature_bufuuid_in,
                            size_t   signature_len
        );


        // directory operations
        public int ecall_fs_create
        (
            [in, string] char                * directory_IN,
            [in, string] char                * filename_IN,
                         nexus_dirent_type_t   type_IN,
                   [out] struct nexus_uuid   * uuid_out
        );
    };


    untrusted {
        // ---------------- metadata management --------------------------

        /**
         * Fetches a metadata file from the backing store and returns the
         * uuid pointing to the buffer
         *
         * @param metadata_uuid
         * @param uuid_path
         * @param backend_info
         * @return uuid of the buffer
         */
        struct nexus_uuid *
        ocall_metadata_get([in]         struct nexus_uuid      * metadata_uuid,
                           [user_check] struct nexus_uuid_path * uuid_path,
                           [user_check] void                   * backend_info);


        /**
         * Writes the contents of an untrusted buffer to the metadata store
         *
         * @param metadata_uuid
         * @param uuid_path
         * @param buffer
         * @param buflen
         * @param backend_info
         * @return 0 on success
         */
        int
        ocall_metadata_set([in]         struct nexus_uuid      * metadata_uuid,
                           [user_check] struct nexus_uuid_path * uuid_path,
                           [in]         struct nexus_uuid      * buffer_uuid,
                           [user_check] void                   * backend_info);


        // ---------------- untrusted buffer management --------------------

        /**
         * Creates a new untrusted buffer
         * @param size is the size of the new buffer
         * @param uuid [out] the uuid of the new allocation
         */
        uint8_t *
        ocall_buffer_alloc(             size_t              size,
                           [out]        struct nexus_uuid * uuid,
                           [user_check] void              * backend_info);

        /**
         * Returns the untrusted pointer to the buffer
         * @param buffer_uuid
         * @return NULL on failure
         */
        uint8_t *
        ocall_buffer_get(        [in] struct nexus_uuid * buffer_uuid,
                                [out] size_t            * buffer_size,
                         [user_check] void              * backend_info);

        /**
         * Frees an allocated buffer
         * @param buffer_uuid
         */
        void
        ocall_buffer_put(        [in] struct nexus_uuid * buffer_uuid,
                         [user_check] void              * backend_info);

        // ---------------------- utilities ---------------------

        /* allocates a buffer in untrusted memory */
        void * ocall_calloc(size_t size);

        /* frees buffer in untrusted memory */
        void ocall_free([user_check] void * untrusted_ptr);

        void ocall_print([in, string] char * str);
    };

};
