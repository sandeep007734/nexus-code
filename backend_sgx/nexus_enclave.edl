enclave {
    include "internal.h"
    include "sgx_backend_common.h"

    trusted {

        /**
         * Initializes the enclave with the specified backend info
         * @param backend_info
         * @return 0 on success
         */
        public int ecall_init_enclave
        (
            [user_check] void * backend_info
        );


        // volume management

        /**
         * Creates a new volume
         *
         * @param user_pubkey_in
         * @param supernode_uuid_out
         * @param sealed_volumekey_out
         */
        public int ecall_create_volume
        (
            [user_check] struct raw_buffer     * user_pubkey_in,
            [user_check] struct nexus_uuid     * supernode_uuid_out,
            [user_check] struct raw_buffer    ** sealed_volumekey_out
        );
    };


    untrusted {

        // ---------------- untrusted buffer management --------------------

        /**
         * Creates a new untrusted buffer
         * @param size is the size of the new buffer
         * @param uuid [out] the uuid of the new allocation
         */
        uint8_t * ocall_buffer_alloc(size_t size, [out] struct nexus_uuid * uuid);

        /**
         * Returns the untrusted pointer to the buffer
         * @param buffer_uuid
         * @return NULL on failure
         */
        uint8_t * ocall_buffer_get([in] struct nexus_uuid * buffer_uuid, [out] size_t * buffer_size);

        /**
         * Frees an allocated buffer
         * @param buffer_uuid
         */
        void ocall_buffer_free([in] struct nexus_uuid * buffer_uuid);



        // ---------------------- utilities ---------------------

        /* allocates a buffer in untrusted memory */
        void * ocall_calloc(size_t size);

        /* frees buffer in untrusted memory */
        void ocall_free([user_check] void * untrusted_ptr);

        void ocall_print([in, string] char * str);
    };

};
